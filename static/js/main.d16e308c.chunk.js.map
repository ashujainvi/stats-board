{"version":3,"sources":["assets/images/stats-board-logo.svg","components/LoginButton/LoginButton.js","components/Header/Header.js","components/Canvas/Canvas.js","components/Hero/Hero.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginButton","to","className","React","Component","Header","src","logo","alt","Canvas","canvas","this","refs","heroCanvas","windowWidth","window","innerWidth","windowHeight","innerHeight","width","height","ctx","getContext","addEventListener","initCircles","circlesArray","numberOfCircles","i","radius","Math","random","data","minRadius","x","getCoordinateValue","y","dx","dy","push","Circle","coordinateType","animateCircles","requestAnimationFrame","clearRect","forEach","circle","update","id","ref","maxRadius","colorRange","color","floor","length","mouse","addMouseListener","beginPath","arc","PI","fillStyle","fill","draw","event","Hero","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d16e308c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stats-board-logo.b250a40f.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass LoginButton extends React.Component {\n\n    render() {\n        return (\n            <Link to=\"/login\">\n                <button className=\"button button-primary\">Login.</button>\n            </Link>\n        )\n    }\n}\n\nexport default LoginButton;","import React from 'react';\nimport './Header.scss';\nimport logo from 'assets/images/stats-board-logo.svg';\nimport LoginButton from 'components/LoginButton/LoginButton.js';\n\nclass Header extends React.Component {\n  render() {\n    return (\n        <header className=\"App-header\">\n          <div>\n            <img src={logo} className=\"App-logo\" alt=\"stats board logo\" />\n            <h3>\n              Stats Board\n            </h3>\n          </div>\n          <LoginButton/>\n        </header>\n    )\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport './Canvas.scss';\n\nclass Canvas extends React.Component {\n    componentDidMount() {   \n        const canvas = this.refs.heroCanvas;\n        let windowWidth = window.innerWidth;\n        let windowHeight = window.innerHeight;\n        canvas.width = windowWidth;\n        canvas.height = windowHeight;\n        const ctx = canvas.getContext(\"2d\");\n\n        window.addEventListener('resize', () => {\n            windowWidth = window.innerWidth;\n            windowHeight = window.innerHeight;\n            canvas.width = windowWidth;\n            canvas.height = windowHeight;\n            initCircles();\n        });\n        let circlesArray = [];\n        function initCircles() {\n            circlesArray = [];\n            const numberOfCircles = windowWidth > 768 ? 565 : 300;\n            for (let i = 0; i <= numberOfCircles; i++) {\n                // circle values for circle class\n                let radius = Math.random() * 3 + 1;\n                const data = {\n                    radius,\n                    minRadius: radius,\n                    x: getCoordinateValue('x', radius), \n                    y: getCoordinateValue('y', radius), \n                    dx: (Math.random() - 0.5) * 3, \n                    dy: (Math.random() - 0.5) * 3, \n                    ctx\n                };\n                circlesArray.push(new Circle(data));\n            }\n        }\n\n        function getCoordinateValue(coordinateType, radius) {\n            if (coordinateType === 'x') {\n                return Math.random() * (windowWidth - radius * 2) + radius;\n            } else {\n                return Math.random() * (windowHeight - radius * 2) + radius;\n            }\n        }\n        \n        function animateCircles() {\n            requestAnimationFrame(animateCircles);\n            ctx.clearRect(0, 0, windowWidth, windowHeight);\n\n            circlesArray.forEach( circle => {\n                circle.update();\n            })\n        }\n\n        initCircles();\n        animateCircles();\n    }\n    \n    render() {\n        return (\n            <canvas id=\"canvas\" className=\"canvas\" ref=\"heroCanvas\"></canvas>    \n        )\n    }\n}\n\nclass Circle {\n    constructor(data) {\n        this.x = data.x;\n        this.y = data.y;\n        this.dx = data.dx;\n        this.dy = data.dy;\n        this.ctx = data.ctx;\n        this.radius = data.radius;\n        this.maxRadius = data.maxRadius || 30;\n        this.minRadius = data.minRadius || 2;\n        this.colorRange = data.colorRange || [ '#fd413c', '#06d294', '#333333'];\n        this.color = this.colorRange[Math.floor(Math.random() * this.colorRange.length)];\n        this.mouse = {\n            x: null,\n            y: null\n        }\n\n        if (window.innerWidth > 768) {\n            this.addMouseListener();\n        }\n    }\n\n    draw() {\n        this.ctx.beginPath();\n        this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n        this.ctx.fillStyle = this.color;\n        this.ctx.fill();\n    }\n\n    update() {\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n        if (this.x + this.radius > windowWidth || this.x - this.radius < 0) {\n            this.dx = -this.dx;\n        }\n\n        if (this.y + this.radius > windowHeight || this.y - this.radius < 0) {\n            this.dy = -this.dy;\n        }\n        this.x += this.dx;\n        this.y += this.dy;\n\n        if (this.mouse.x) {\n            if (this.mouse.x - this.x < 50 && this.mouse.x - this.x > -50 \n                && this.mouse.y - this.y < 50 && this.mouse.y -this.y > -50) {\n                    if (this.radius < this.maxRadius) {\n                        this.radius += 1;\n                    }\n            } else if (this.radius > this.minRadius) {\n                this.radius -= 1;\n            }\n        }\n    \n        this.draw();\n    }\n\n    // mouse interactivity\n    addMouseListener() {\n        window.addEventListener('mousemove', event => {\n            this.mouse.x = event.x;\n            this.mouse.y = event.y;\n        })\n    }\n}\n\nexport default Canvas;","import React from 'react';\nimport './Hero.scss';\nimport Canvas from 'components/Canvas/Canvas';\n\nclass Hero extends React.Component {\n    render() {\n        return (\n            <div className=\"hero-container\">\n                <Canvas/>\n                <h1>All your data available in one central hub</h1>\n                <p>Our tool allows you to put all your data at your fingertips within a single central hub.   \n                     <span className=\"color-blue\">Stats Board</span> improves the quality of your data by harmonizing all datasets into a consistent format.\n                </p>\n                <button className=\"button button-primary\">Get Started</button>\n            </div>\n        )\n    }\n}\n\nexport default Hero;","import React from 'react';\nimport './App.scss';\nimport Header from 'components/Header/Header.js';\nimport Hero from 'components/Hero/Hero.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Header/>\n        <Switch>\n          <Route exact path=\"/\">\n            <Hero/>\n          </Route>\n        </Switch>\n      </Router>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}