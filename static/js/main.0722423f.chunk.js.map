{"version":3,"sources":["assets/images/stats-board-logo.svg","components/LoginButton/LoginButton.js","components/header/header.js","components/Hero/Hero.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginButton","props","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","className","toLocaleTimeString","React","Component","Header","src","logo","alt","Hero","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,8C,uPC6B5BC,E,kDA1BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,KAAM,IAAIC,MAFT,E,gEAKE,IAAD,OAChBC,KAAKC,QAAUC,aACX,kBAAM,EAAKC,SACX,O,6CAKJC,cAAcJ,KAAKC,W,6BAInBD,KAAKK,SAAS,CAAEP,KAAM,IAAIC,S,+BAG1B,OACI,4BAAQO,UAAU,yBAAyBN,KAAKH,MAAMC,KAAKS,0B,GAtB7CC,IAAMC,WCmBjBC,E,uKAdX,OACI,4BAAQJ,UAAU,cAChB,6BACE,yBAAKK,IAAKC,IAAMN,UAAU,WAAWO,IAAI,qBACzC,4CAIF,kBAAC,EAAD,W,GAVWL,IAAMC,WCgBZK,G,wDAjBX,WAAYlB,GAAQ,uCACVA,G,qDAKN,OACI,yBAAKU,UAAU,kBACX,0EACA,sHACK,0BAAMA,UAAU,cAAhB,eADL,4FAEK,4BAAQA,UAAU,yBAAlB,oB,GAZFE,IAAMC,YCaVM,E,uKATX,OACE,iCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUP,IAAMC,WCOJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0722423f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stats-board-logo.b250a40f.svg\";","import React from 'react';\n\nclass LoginButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n          );\n    }\n  \n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({ date: new Date()});\n    }\n    render() {\n        return (\n            <button className=\"button button-primary\">{this.state.date.toLocaleTimeString()}</button>\n        )\n    }\n}\n\nexport default LoginButton;","import React from 'react';\nimport './header.scss';\nimport logo from 'assets/images/stats-board-logo.svg';\nimport LoginButton from 'components/LoginButton/LoginButton.js';\n\nclass Header extends React.Component {\n  render() {\n    return (\n        <header className=\"App-header\">\n          <div>\n            <img src={logo} className=\"App-logo\" alt=\"stats board logo\" />\n            <h3>\n              Stats Board\n            </h3>\n          </div>\n          <LoginButton/>\n        </header>\n    )\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport './Hero.scss';\n\nclass Hero extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.state = {date: new Date()};\n    }\n\n    render() {\n        return (\n            <div className=\"hero-container\">\n                <h1>All your data available in one central hub</h1>\n                <p>Our tool allows you to put all your data at your fingertips within a single central hub.   \n                     <span className=\"color-blue\">Stats Board</span> improves the quality of your data by harmonizing all datasets into a consistent format.</p>\n                     <button className=\"button button-primary\">Get Started</button>\n            </div>\n        )\n    }\n}\n\nexport default Hero;","import React from 'react';\nimport './App.scss';\nimport Header from 'components/header/header.js';\nimport Hero from 'components/Hero/Hero.js';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <section>\n        <Header/>\n        <Hero/>\n      </section>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}